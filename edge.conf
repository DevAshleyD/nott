events {
  worker_connections 1024;
}

error_log stderr;

http {
  resolver 127.0.0.11 ipv6=off;

  lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/lua/src/?.lua";
  lua_package_cpath "/usr/local/openresty/lualib/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;";

  lua_shared_dict redis_cluster_slot_locks 100k;

  init_by_lua_block {
    config = {
      name = "redis-cluster",
      serv_list = {
        { ip = "redis_cluster", port = 7000 },
      },
      keepalive_timeout = 60000,
      keepalive_cons = 1000,
      connection_timout = 1000,
      max_redirection = 5,
    }

    redis_cluster = require "resty-redis-cluster"
  }

  upstream backend {
    server ingest;
  }

  proxy_cache_path /tmp levels=1:2 keys_zone=my_cache:10m max_size=1g inactive=10m use_temp_path=off;
  server {
    listen 8080;

    location / {
        proxy_cache my_cache;
        proxy_cache_lock on;

        proxy_cache_lock_timeout 2s;
        proxy_cache_use_stale error timeout updating invalid_header;

        proxy_ignore_headers Cache-Control;
        proxy_cache_valid any 2s;

        add_header X-Cache-Status $upstream_cache_status;
        proxy_pass http://backend;

        access_by_lua_block {
          -- blacklist the hacker
          if ngx.var.remote_addr == "132.5.72.3" then
             return ngx.exit(ngx.HTTP_FORBIDDEN)
          end

          -- authentication token scheme
          local token = ngx.var.arg_token or ngx.var.cookie_superstition
          if token ~= "token" then
             return ngx.exit(ngx.HTTP_FORBIDDEN)
          else
            ngx.header['Set-Cookie'] = {'superstition=token'}
          end


          -- origin rejection
          local headers = ngx.req.get_headers()
          if not string.find(headers["Referer"],"localhost") then
             return ngx.exit(ngx.HTTP_FORBIDDEN)
          end

          -- counting how many requests a given ip did
          local redis_client = redis_cluster:new(config)
          local resp, err = redis_client:incr(ngx.var.remote_addr)
          ngx.header['X-Request-Counter'] = resp
        }

        header_filter_by_lua_block {
          -- metrics on client side are the future
          ngx.header['X-Metrics-upstream_response_time'] = ngx.var.upstream_response_time
          ngx.header['X-Metrics-upstream_connect_time'] = ngx.var.upstream_connect_time
          ngx.header['X-Metrics-request_time'] = ngx.var.request_time
          ngx.header['X-Metrics-tcpinfo_rtt'] = ngx.var.tcpinfo_rtt
          ngx.header['X-Metrics-time_iso8601'] = ngx.var.time_iso8601

          -- we dunno the size our custom manifest
          if string.find(ngx.var.request_uri,"m3u8") then
            ngx.header.content_length = nil
          end
        }

        body_filter_by_lua_block {
          local body = ngx.arg[1]
          -- totally safe way to check if we're serving manifest
          if string.find(ngx.var.request_uri,"m3u8") then
            ngx.arg[1] = body .. "\n#COPYRIGHT: mysite.com"
          end
        }
    }

    location /app {
        alias /usr/local/openresty/nginx/;
    }
  }
}
